#version 450

layout(location = 0) in vec2 vUV;

#!texture(0, colorSampler)
#!texture(1, normalSampler)
#!texture(2, specSampler)
#!texture(3, emissionSampler)
#!texture(4, depthSampler)

#!structure(CameraBuffer, 5, camBuffer)
#!structure(SSDirectionalLightBuffer, 6, dirLightBuffer)

layout(location = 0) out vec4 fragColor;

void main()
{
    vec4 normal = texture(normalSampler, vUV);
    if (normal.w < 0.5f)
    {
        discard;
    }
    vec4 color = texture(colorSampler, vUV);
    vec4 spec = texture(specSampler, vUV);

    vec3 cF = camBuffer.View[2].xyz;

    vec4 finalColor = vec4(0.0, 0.0, 0.0, 0.0);

    for (int i = 0; i < dirLightBuffer.Count; i++)
    {
        vec4 lD = dirLightBuffer.objects[i].LightDir;
        vec4 lCr = dirLightBuffer.objects[i].LightColor;

        float l = max(dot(lD.xyz, normal.xyz), 0.0);

        vec3 hD = normalize(lD.xyz + cF);
        float sA = dot(hD, normal.xyz);
        float s = max(pow(sA, spec.w), 0.0);

        vec3 lC = color.xyz * l * lCr.xyz * lD.w;
        vec3 sC = spec.xyz * s * lCr.xyz * lD.w;

        finalColor += vec4(lC + sC, 1.0);
    }
    
    fragColor = vec4(finalColor.xyz, 1.0);
}