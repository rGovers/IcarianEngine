#version 450

layout(location = 0) in vec2 vUV;

#!texture(0, colorSampler)
#!texture(1, normalSampler)
#!texture(2, aoSampler)

#!structure(AmbientLightBuffer, 3, ambientLightBuffer)

layout(location = 0) out vec4 fragColor;

const int kernelSize = 1;
const int limit = kernelSize * 2 + 1;
const int maxKernelSize = limit * limit;
const float stepValue = 0.001;

void main()
{
    vec4 normal = texture(normalSampler, vUV);
    if (normal.w < 0.5)
    {
        discard;
    }

    vec4 color = texture(colorSampler, vUV);

    int b[maxKernelSize];

    #!preloop(iter, 0, 9, 
    {
        b[iter] = 0;
    })

    #!preloop(iterY, -1, 2,
    {
        #!preloop(iterX, -1, 2,
        {
            float c = texture(aoSampler, vUV + vec2(iterX, iterY) * stepValue).x;
            int bIn = clamp(int(c * maxKernelSize), 0, maxKernelSize - 1);
            b[bIn] += 1;
        })
    })

    float ao = 0.0;
    float t = 0.0;
    for (int i = 0; i < maxKernelSize; i++)
    {
        t += b[i];
        if (t >= limit)
        {
            ao = float(i) / maxKernelSize;

            break;
        }
    }

    vec4 lCr = ambientLightBuffer.LightColor;

    fragColor = vec4(color.rgb * lCr.xyz * lCr.w * sqrt(1 - ao), 1.0);
}