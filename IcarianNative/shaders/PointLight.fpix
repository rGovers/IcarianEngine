#version 450

layout(location = 0) in vec2 vUV;

#!texture(0, colorSampler)
#!texture(1, normalSampler)
#!texture(2, specSampler)
#!texture(3, emissionSampler)
#!texture(4, depthSampler)

#!structure(CameraBuffer, 5, camBuffer)
#!structure(SSPointLightBuffer, 6, pointLightBuffer)

#!import(Camera)
#!import(PointLight)

layout(location = 0) out vec4 fragColor;

void main()
{
    vec4 normal = texture(normalSampler, vUV);
    if (normal.w < 0.5)
    {
        discard;
    }

    vec4 color = texture(colorSampler, vUV);
    vec4 spec = texture(specSampler, vUV);
    float depth = texture(depthSampler, vUV).x;

    vec4 mP = ScreenToWorld(vec3(vUV * 2.0 + -1.0, depth), camBuffer);

    vec3 p = camBuffer.InvView[3].xyz;
    vec3 cV = normalize(p - mP.xyz);

    float rough = spec.x;
    float metal = spec.y;

    vec4 finalColor = vec4(0.0, 0.0, 0.0, 0.0);
    for (int i = 0; i < pointLightBuffer.Count; i++)
    {
        finalColor += PointLightShading(color, mP.xyz, cV, normal.xyz, rough, metal, pointLightBuffer.objects[i]);
    }
    
    fragColor = vec4(finalColor.xyz, 1.0);
}