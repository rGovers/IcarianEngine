#version 450

layout(location = 0) in vec2 vUV;

layout(binding = 0) uniform sampler2D colorSampler;
layout(binding = 1) uniform sampler2D normalSampler;
layout(binding = 2) uniform sampler2D specSampler;
layout(binding = 3) uniform sampler2D emissionSampler;
layout(binding = 4) uniform sampler2D depthSampler;

#!structure(CameraBuffer, 5, 1, camBuffer)
#!structure(SSPointLightBuffer, 6, 2, pointLightBuffer)

layout(location = 0) out vec4 fragColor;

void main()
{
    vec4 normal = texture(normalSampler, vUV);
    if (normal.w < 0.5)
    {
        discard;
    }

    vec4 color = texture(colorSampler, vUV);
    vec4 spec = texture(specSampler, vUV);
    float d = texture(depthSampler, vUV).x;

    vec4 cP = vec4(vUV * 2.0 + -1.0, d, 1.0);
    vec4 vP = camBuffer.InvProj * cP;
    vP /= vP.w;
    vec4 mP = camBuffer.InvView * vP;

    vec3 cF = camBuffer.View[2].xyz;

    vec4 finalColor = vec4(0.0, 0.0, 0.0, 0.0);
    for (int i = 0; i < pointLightBuffer.Count; i++)
    {
        float lR = pointLightBuffer.objects[i].Radius;
        vec4 lP = pointLightBuffer.objects[i].LightPos;
        vec4 lCr = pointLightBuffer.objects[i].LightColor;

        vec3 lDir = lP.xyz - mP.xyz;
        float dL = length(lDir);
        lDir /= dL;

        float l = max(dot(lDir, normal.xyz), 0.0);

        vec3 hD = normalize(lDir + cF);
        float sA = dot(hD, normal.xyz);
        float s = max(pow(sA, spec.w), 0.0);

        float iV = max((lR - dL) / lR, 0.0);

        vec3 lC = color.xyz * l * lCr.xyz * lP.w * iV;
        vec3 sC = spec.xyz * s * lCr.xyz * lP.w * iV;

        finalColor += vec4(lC + sC, 1.0);
    }
    
    fragColor = vec4(finalColor.xyz, 1.0);
}