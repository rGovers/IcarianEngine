#version 450

layout(location = 0) in vec2 vUV;

#!texture(0, colorSampler)
#!texture(1, normalSampler)
#!texture(2, specSampler)
#!texture(3, emissionSampler)
#!texture(4, depthSampler)
#!shadowtexture(5, shadowSampler)

#!structure(CameraBuffer, 6, camBuffer)
#!structure(SpotLightBuffer, 7, spotLightBuffer)
#!structure(ShadowLightBuffer, 8, shadowLightBuffer)

#!import(Camera)
#!import(SpotLight)

layout(location = 0) out vec4 fragColor;

const float NearPlane = 0.1;

void main()
{
    vec4 normal = texture(normalSampler, vUV);
    if (normal.w < 0.5)
    {
        discard;
    }

    float depth = texture(depthSampler, vUV).x;

    vec4 mP = ScreenToWorld(vec3(vUV * 2.0 + -1.0, depth), camBuffer);

    vec3 lP = spotLightBuffer.LightPos.xyz;
    vec3 lCa = spotLightBuffer.CutoffAngle.xyz;

    vec4 sP = shadowLightBuffer.LVP * mP;
    sP /= sP.w;
    vec4 sPP = sP * 0.5 + 0.5;
    float sD = texture(shadowSampler, sPP.xy).x;
    float sN = LinearDepth(sD, NearPlane, lCa.z);

    vec3 vD = lP - mP.xyz;
    float lDL = length(vD);
    if (sN < lDL)
    {
        discard;
    }

    vec4 color = texture(colorSampler, vUV);
    vec4 spec = texture(specSampler, vUV);

    vec3 p = camBuffer.InvView[3].xyz;
    vec3 cV = normalize(p - mP.xyz);

    float rough = spec.x;
    float metal = spec.y;

    fragColor = SpotLightShading(color, mP.xyz, cV, normal.xyz, rough, metal, spotLightBuffer);
}