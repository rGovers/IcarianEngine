#version 450

layout(location = 0) in vec2 vUV;

#!texture(0, colorSampler)
#!texture(1, normalSampler)
#!texture(2, specSampler)
#!texture(3, emissionSampler)
#!texture(4, depthSampler)
#!shadowtexture(5, shadowSampler)

#!structure(CameraBuffer, 6, camBuffer)
#!structure(SpotLightBuffer, 7, spotLightBuffer)
#!structure(ShadowLightBuffer, 8, shadowLightBuffer)

layout(location = 0) out vec4 fragColor;

const float NearPlane = 0.1;

void main()
{
    vec4 normal = texture(normalSampler, vUV);
    if (normal.w < 0.5)
    {
        discard;
    }
    
    float d = texture(depthSampler, vUV).x;

    vec4 cP = vec4(vUV * 2.0 + -1.0, d, 1.0);
    vec4 vP = camBuffer.InvProj * cP;
    vP /= vP.w;
    vec4 mP = camBuffer.InvView * vP;

    vec3 lP = spotLightBuffer.LightPos.xyz;
    vec3 lCa = spotLightBuffer.CutoffAngle.xyz;

    vec4 sP = shadowLightBuffer.LVP * mP;
    sP /= sP.w;
    vec4 sPP = sP * 0.5 + 0.5;
    float sD = texture(shadowSampler, sPP.xy).x + 0.0001;
    float sN = NearPlane * lCa.z / (lCa.z + sD * (NearPlane - lCa.z));
    vec3 lDir = lP - mP.xyz;
    float dL = length(lDir);
    if (sN < dL)
    {
        discard;
    }

    lDir /= dL;

    vec3 cF = camBuffer.View[2].xyz;

    vec4 color = texture(colorSampler, vUV);
    vec4 spec = texture(specSampler, vUV);

    vec4 lD = spotLightBuffer.LightDir.xyzw;
    vec4 lCr = spotLightBuffer.LightColor.xyzw;

    float t = dot(lD.xyz, lDir);

    float e = lCa.x - lCa.y;
    float iV = clamp((t - lCa.y) / e, 0.0, 1.0);

    float l = max(dot(lDir, normal.xyz), 0.0);

    vec3 hD = normalize(lDir + cF);
    float sA = max(dot(hD, normal.xyz), 0.0);
    float s = max(pow(sA, spec.w), 0.0);

    float dI = max((lCa.z - dL) / lCa.z, 0.0);

    vec3 lC = color.xyz * l * lCr.xyz * lD.w * iV * dI;
    vec3 sC = spec.xyz * s * lCr.xyz * lD.w * iV * dI;

    fragColor = vec4(lC + sC, 1.0);
}