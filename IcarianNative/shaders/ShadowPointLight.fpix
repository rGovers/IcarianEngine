#version 450

layout(location = 0) in vec2 vUV;

#!texture(0, colorSampler)
#!texture(1, normalSampler)
#!texture(2, specSampler)
#!texture(3, emissionSampler)
#!texture(4, depthSampler)
#!cubeshadowtexture(5, shadowSampler)

#!structure(CameraBuffer, 6, camBuffer)
#!structure(PointLightBuffer, 7, pointLightBuffer)

#!import(Camera)
#!import(PointLight)

layout(location = 0) out vec4 fragColor;

const float NearPlane = 0.1;

void main()
{
    vec4 normal = texture(normalSampler, vUV);
    if (normal.w < 0.5)
    {
        discard;
    }

    float depth = texture(depthSampler, vUV).x;

    vec4 mP = ScreenToWorld(vec3(vUV * 2.0 + -1.0, depth), camBuffer);

    float lR = pointLightBuffer.Radius;
    vec4 lP = pointLightBuffer.LightPos;

    vec3 pTL = lP.xyz - mP.xyz;
    float lDL = length(pTL);
    if (lDL > lR)
    {
        discard;
    }

    vec3 lD = pTL / lDL;

    // Not the correct was of doing it but do not have length component only depth
    // By doing so need to correct for cube projection
    // Again not the correct way of doing it but seems to kinda work outside of janky situations
    vec3 cFM = abs(lD);
    float mF = max(max(cFM.x, cFM.y), cFM.z);

    float sD = texture(shadowSampler, pTL).x;
    float cD = NearPlane * lR / (lR - sD * (lR - NearPlane));
    // Need high bias to prevent shadow acne and additional prevention of janky projection correction
    if (cD < lDL * mF - 0.01)
    {
        discard;
    }

    vec4 color = texture(colorSampler, vUV);
    vec4 spec = texture(specSampler, vUV);
    vec4 lCr = pointLightBuffer.LightColor;

    float rough = spec.x;
    float metal = spec.y;

    vec3 p = camBuffer.InvView[3].xyz;
    vec3 cV = normalize(p - mP.xyz);

    fragColor = PointLightShading(color, mP.xyz, cV, normal.xyz, rough, metal, pointLightBuffer);
}