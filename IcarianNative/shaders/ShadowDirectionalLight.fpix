#version 450

layout(location = 0) in vec2 vUV;

#define CascadeCount 4

layout(binding = 0) uniform sampler2D colorSampler;
layout(binding = 1) uniform sampler2D normalSampler;
layout(binding = 2) uniform sampler2D specSampler;
layout(binding = 3) uniform sampler2D emissionSampler;
layout(binding = 4) uniform sampler2D depthSampler;
layout(binding = 5, set = 1) uniform sampler2D shadowSampler[CascadeCount];

#!structure(CameraBuffer, 6, 2, camBuffer)
#!structure(DirectionalLightBuffer, 7, 3, dirLightBuffer)
#!structure(SSShadowLightBuffer, 8, 4, shadowLightBuffer)

layout(location = 0) out vec4 fragColor;

void main()
{
    vec4 normal = texture(normalSampler, vUV);
    if (normal.w < 0.5)
    {
        discard;
    }

    vec4 color = texture(colorSampler, vUV);
    vec4 spec = texture(specSampler, vUV);
    float d = texture(depthSampler, vUV).x;

    vec4 cP = vec4(vUV * 2.0 + -1.0, d, 1.0);
    vec4 vP = camBuffer.InvProj * cP;
    vP /= vP.w;
    vec4 mP = camBuffer.InvView * vP;

    vec3 cF = camBuffer.View[2].xyz;

    int sI = 0;
    vec4 lP;
    for (int i = 0; i < CascadeCount; i++)
    {
        if (-vP.z <= shadowLightBuffer.objects[i].Split)
        {
            sI = i;
            lP = shadowLightBuffer.objects[i].LVP * mP;

            break;
        }
    }

    vec4 sP = lP * 0.5 + 0.5;
    float sV = texture(shadowSampler[sI], sP.xy).x - 0.0001;
    float iS = max(sign(sV - lP.z), 0.0);

    vec4 lD = dirLightBuffer.LightDir;
    vec4 lCr = dirLightBuffer.LightColor;

    float l = max(dot(normal.xyz, lD.xyz), 0.0);

    vec3 hD = normalize(lD.xyz + cF);
    float sA = dot(hD, normal.xyz);
    float s = max(pow(sA, spec.w), 0.0);

    vec3 lC = color.xyz * l * lCr.xyz * lD.w;
    vec3 sC = spec.xyz * s * lCr.xyz * lD.w;

    fragColor = vec4((lC + sC) * iS, 1.0);
    // fragColor = vec4(lCr.xyz * iS, 1.0);
}