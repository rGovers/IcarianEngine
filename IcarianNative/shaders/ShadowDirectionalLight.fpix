#version 450

layout(location = 0) in vec2 vUV;

#!texture(0, colorSampler)
#!texture(1, normalSampler)
#!texture(2, specSampler)
#!texture(3, emissionSampler)
#!texture(4, depthSampler)
#!shadowtexturearray(5, 6, shadowSampler)

#!structure(CameraBuffer, 6, camBuffer)
#!structure(DirectionalLightBuffer, 7, dirLightBuffer)
#!structure(SSShadowLightBuffer, 8, shadowLightBuffer)

#!import(DirectionalLight)

layout(location = 0) out vec4 fragColor;

void main()
{
    vec4 normal = texture(normalSampler, vUV);
    if (normal.w < 0.5)
    {
        discard;
    }

    float depth = texture(depthSampler, vUV).x;

    vec4 cP = vec4(vUV * 2.0 + -1.0, depth, 1.0);
    vec4 vP = camBuffer.InvProj * cP;
    vP /= vP.w;
    vec4 mP = camBuffer.InvView * vP;

    int sI = 0;
    vec4 lP;
    #!preloop(iter, 0, 6,
    {
        if (-vP.z <= shadowLightBuffer.objects[iter].Split)
        {
            sI = iter;
            lP = shadowLightBuffer.objects[iter].LVP * mP;

            break;
        }
    })

    vec4 sP = lP * 0.5 + 0.5;
    float sV = texture(shadowSampler[sI], sP.xy).x;
    if (lP.z > sV)
    {
        discard;
    }

    vec3 p = camBuffer.InvView[3].xyz;
    vec3 cV = normalize(p - mP.xyz);

    vec4 color = texture(colorSampler, vUV);
    vec4 spec = texture(specSampler, vUV);
    float rough = spec.x;
    float metal = spec.y;

    fragColor = DirectionalLightShading(color, cV, normal.xyz, rough, metal, dirLightBuffer);
}