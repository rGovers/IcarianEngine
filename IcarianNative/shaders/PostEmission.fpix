#version 450

layout(location = 0) in vec2 vUV;

#!pushtexture(0, colorSampler)
#!pushtexture(1, emissionSampler)

layout(location = 0) out vec4 fragColor;

const int directions = 8;
const float emissionRadius = 0.005;
const int quality = 4;
const float pi2 = 6.2831850718;

void main()
{
    vec4 color = texture(colorSampler, vUV);
    vec4 emissive = texture(emissionSampler, vUV);

    #!preloop(dirIter, 0, 8,
    {
        float d = (dirIter / float(directions)) * pi2;
        vec2 dr = vec2(cos(d), sin(d)) * emissionRadius;
        #!preloop(qualIter, 0, 4, 
        {
            // Constants so only the samples remain after optimization
            // Compiler fails to realise that if it unrolls the values become constants therefore operations can be removed from the loop
            // TLDR: preloop good normal loop bad
            emissive += texture(emissionSampler, vUV + dr * ((qualIter + 1) / float(quality)));
        })
    })

    emissive /= quality * directions;

    fragColor = color + emissive;
}